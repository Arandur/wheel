{"version":3,"sources":["components/svg/svg.tsx","components/Sector.tsx","components/Wheel.tsx","components/App.tsx","index.tsx"],"names":["Svg","props","innerWidth","innerHeight","render","rest","viewBox","join","ref","React","createRef","ctx","withMousePos","cbk","e","svg","current","pt","createSVGPoint","x","clientX","y","clientY","matrixTransform","getScreenCTM","inverse","getTextWidth","Object","assign","text","font","canvas","document","createElement","getContext","measureText","width","undefined","Sector","useState","score","setScore","hover","setHover","styles","useStyles","maxRadius","Math","min","levelToRadius","level","grads","getScoreFromMousePos","radius","sqrt","ceil","radiusToLevel","sectorPath","degs","arc","rads","PI","cos","sin","title","offset","id","className","titlePath","d","xlinkHref","startOffset","scoreSector","sectorFill","hoverSector","sectorHover","paths","sectorContainer","onMouseMove","onMouseLeave","onMouseDown","createUseStyles","fill","stroke","strokeWidth","pointerEvents","textAlign","Wheel","gradCircles","Array","from","keys","slice","map","i","cx","cy","r","sectors","idx","transform","length","strokeDasharray","life_sectors","App","height","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.41c41beb.chunk.js","sourcesContent":["import React from 'react';\n\nexport type SvgContext = {\n    innerWidth: number;\n    innerHeight: number;\n    withMousePos: <T>(cbk: (pt: { x: number, y: number }) => T) => (e: React.MouseEvent<SVGElement>) => T | undefined;\n}\n\ntype SvgProps = {\n    innerWidth: number;\n    innerHeight: number;\n    render: (ctx: SvgContext) => React.ReactNode;\n} & React.SVGProps<SVGSVGElement>;\n\nconst Svg = (props: SvgProps) => {\n    const { innerWidth, innerHeight, render, ...rest } = props;\n    const viewBox = [\n        -innerWidth / 2, -innerHeight / 2,\n        innerWidth, innerHeight\n    ].join(' ');\n\n    const ref = React.createRef<SVGSVGElement>();\n\n    const withMousePos = <T extends {}>(cbk: (pt: { x: number, y: number }) => T) =>\n        (e: React.MouseEvent<SVGElement>) => {\n            const svg = ref.current;\n            if (svg) {\n                let pt = svg.createSVGPoint();\n                pt.x = e.clientX; pt.y = e.clientY;\n                pt = pt.matrixTransform(svg.getScreenCTM()?.inverse());\n                return cbk(pt);\n            }\n        }\n\n    const ctx: SvgContext = {\n        innerWidth, innerHeight,\n        withMousePos\n    };\n\n    return (\n        <svg ref={ref} viewBox={viewBox} {...rest}>\n            {render(ctx)}\n        </svg>\n    );\n}\n\nexport default Svg;","import React, { useState } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { SvgContext } from './svg/svg';\n\nexport type SectorProps = {\n    title: string;\n    arc: number; // Size of the arc as a fraction of tau\n    grads: number; // Number of gradients for each sector\n    ctx: SvgContext\n}\n\nconst getTextWidth = Object.assign(\n    (text: string, font: string): number => {\n        const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n        const ctx = canvas.getContext('2d')!!;\n        ctx.font = font;\n        const metrics = ctx.measureText(text);\n        return metrics.width;\n    },\n    { canvas: undefined as HTMLCanvasElement | undefined}\n);\n\nexport const Sector = (props: SectorProps) => {\n    let [score, setScore] = useState(0);\n    let [hover, setHover] = useState<number | undefined>(undefined);\n    let styles = useStyles();\n\n    let maxRadius = Math.min(props.ctx.innerHeight, props.ctx.innerWidth) / 2 * 5 / 6;\n    const levelToRadius = (level: number): number => maxRadius * level / props.grads;\n    const radiusToLevel = (radius: number): number => radius * props.grads / maxRadius;\n\n    const getScoreFromMousePos = props.ctx.withMousePos(\n        (pt: { x: number, y: number }): number => {\n            const radius = Math.sqrt(pt.x * pt.x + pt.y * pt.y);\n            return Math.ceil(radiusToLevel(radius));\n        }\n    );\n\n    const sectorPath = (level: number): string => {\n        const radius = levelToRadius(level);\n        const degs = props.arc * 360;\n        const rads = props.arc * 2 * Math.PI;\n        const x = radius * Math.cos(rads);\n        const y = radius * Math.sin(rads);\n\n        return `\n            M 0 0\n            L ${radius} 0\n            A ${radius} ${radius} ${degs} 0 1 ${x} ${y}\n            Z\n        `\n    };\n\n    const title = (() => {\n        const radius = levelToRadius(props.grads + 0.5);\n        const degs = props.arc * 360;\n        const rads = props.arc * 2 * Math.PI;\n        const x = radius * Math.cos(rads);\n        const y = radius * Math.sin(rads);\n        const textPathLength = radius * rads;\n        const textLength = getTextWidth(props.title, '12px sans-serif')\n        const offset = (textPathLength - textLength) / 2;\n\n        return (\n            <>\n                <path id=\"title\" key=\"title\" className={styles.titlePath} d={`M ${radius} 0 A ${radius} ${radius} ${degs} 0 1 ${x} ${y}`} />\n                <text className={styles.title}>\n                    <textPath xlinkHref=\"#title\" startOffset={offset}>{props.title}</textPath>\n                </text>\n            </>\n        );\n    })();\n\n    const onMouseMove = (e: React.MouseEvent<SVGPathElement>) => {\n        const radius = getScoreFromMousePos(e);\n\n        if (radius !== hover) {\n            setHover(radius);\n        }\n    }\n\n    const onMouseLeave = () => setHover(undefined);\n\n    const onMouseClick = (e: React.MouseEvent<SVGPathElement>) => {\n        const radius = getScoreFromMousePos(e);\n\n        if (radius && radius !== score) {\n            setScore(radius);\n        } else {\n            setScore(0);\n        }\n    }\n\n    const paths = () => {\n        const scoreSector = <path key=\"score\" className={styles.sectorFill} d={sectorPath(score)} />;\n\n        if (hover) {\n            const hoverSector = <path key=\"hover\" className={styles.sectorHover} d={sectorPath(hover)} />;\n\n            // Order matters: later elements will be drawn over earlier ones.\n            if (hover < score) {\n                return [scoreSector, hoverSector]\n            } else {\n                return [hoverSector, scoreSector]\n            }\n        } else {\n            return [scoreSector];\n        }\n    }\n\n    return (\n        <>\n            {paths()}\n            <path \n                className={styles.sectorContainer} \n                d={sectorPath(props.grads)} \n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onMouseDown={onMouseClick} />\n            {title}\n        </>\n    );\n}\n\nconst useStyles = createUseStyles(\n    {\n        sectorContainer: {\n            fill: \"transparent\",\n            stroke: \"black\",\n            strokeWidth: 1,\n            pointerEvents: \"fill\"\n        },\n        sectorHover: {\n            fill: \"rgba(255, 128, 128)\",\n            stroke: \"none\"\n        },\n        sectorFill: {\n            fill: \"rgb(255, 0, 0)\",\n            stroke: \"none\"\n        },\n        titlePath: {\n            fill: \"transparent\"\n        },\n        title: {\n            textAlign: \"center\",\n            font: \"12px sans-serif\"\n        }\n    }\n);","import React from 'react';\nimport { Sector } from './Sector';\nimport { createUseStyles } from 'react-jss';\nimport { SvgContext } from './svg/svg';\n\nexport type WheelProps = {\n    sectors: string[];\n    grads: number;\n    ctx: SvgContext;\n}\n\nexport const Wheel = (props: WheelProps) => {\n    const styles = useStyles();\n\n    let maxRadius = Math.min(props.ctx.innerHeight, props.ctx.innerWidth) / 2 * 5 / 6;\n    const levelToRadius = (level: number): number => maxRadius * level / props.grads;\n\n    const makeSector = (title: string, idx: number) =>\n        <g key={title} transform={`rotate(${idx * 360 / props.sectors.length})`}>\n            <Sector \n                title={title}\n                arc={1 / props.sectors.length}\n                grads={props.grads}\n                ctx={props.ctx}\n            />\n        </g>\n\n    const gradCircles = Array.from(Array(props.grads).keys()).slice(1).map((i) => {\n        const radius = levelToRadius(i);\n        return <circle key={i} className={styles.gradCircles} cx={0} cy={0} r={radius} />\n    });\n\n    return (\n        <>\n          {props.sectors.map(makeSector)}\n          {gradCircles}\n        </>\n    );\n}\n\nconst useStyles = createUseStyles({\n    gradCircles: {\n        fill: \"none\",\n        stroke: \"gray\",\n        strokeDasharray: \"4\",\n        pointerEvents: \"none\"\n    }\n});","import Svg, { SvgContext } from './svg/svg';\nimport { Wheel } from './Wheel';\n\nconst life_sectors = [\"Money\", \"Fun\", \"Friends\", \"Health\", \"Career\", \"Love\", \"Spirituality\", \"Family\"];\n\nfunction App() {\n  //return <Wheel sectors={life_sectors} grads={10} width={640} height={640} />\n  return (\n    <Svg\n      width={640} height={640}\n      innerWidth={240} innerHeight={240}\n      render={(ctx: SvgContext) => <Wheel sectors={life_sectors} grads={10} ctx={ctx} />}\n    />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}