{"version":3,"sources":["Sector.tsx","Wheel.tsx","App.tsx","index.tsx"],"names":["getTextWidth","Object","assign","text","font","ctx","canvas","document","createElement","getContext","measureText","width","undefined","Sector","props","useState","score","setScore","hover","setHover","styles","useStyles","getScoreFromMousePos","e","mousePos","getMousePos","console","log","x","y","Math","ceil","sqrt","sectorPath","level","radius","degs","arc","rads","PI","cos","sin","title","offset","id","className","titlePath","d","xlinkHref","startOffset","scoreSector","sectorFill","hoverSector","sectorHover","paths","sectorContainer","onMouseMove","onMouseLeave","onMouseDown","createUseStyles","fill","stroke","strokeWidth","textAlign","svg","getElementById","pt","createSVGPoint","clientX","clientY","matrixTransform","getScreenCTM","inverse","Wheel","viewBox","height","sectors","map","idx","transform","length","life_sectors","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a489e3ce.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { createUseStyles } from 'react-jss';\n\nexport type SectorProps = {\n    title: string;\n    arc: number; // Size of the arc as a fraction of tau\n    getMousePos: (e: React.MouseEvent<SVGElement>) => SVGPoint;\n}\n\nconst getTextWidth = Object.assign(\n    (text: string, font: string): number => {\n        const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));\n        const ctx = canvas.getContext('2d')!!;\n        ctx.font = font;\n        const metrics = ctx.measureText(text);\n        return metrics.width;\n    },\n    { canvas: undefined as HTMLCanvasElement | undefined}\n);\n\nexport const Sector = (props: SectorProps) => {\n    let [score, setScore] = useState(0);\n    let [hover, setHover] = useState<number | undefined>(undefined);\n    let styles = useStyles();\n\n    const getScoreFromMousePos = (e: React.MouseEvent<SVGElement>): number => {\n        const mousePos = props.getMousePos(e);\n        console.log(`mousePos: { x: ${mousePos.x}, y: ${mousePos.y} }`);\n        return Math.ceil(Math.sqrt(mousePos.x * mousePos.x + mousePos.y * mousePos.y) / 10);\n    }\n\n    const sectorPath = (level: number): string => {\n        const radius = level * 10;\n        const degs = props.arc * 360;\n        const rads = props.arc * 2 * Math.PI;\n        const x = radius * Math.cos(rads);\n        const y = radius * Math.sin(rads);\n\n        return `\n            M 0 0\n            L ${radius} 0\n            A ${radius} ${radius} ${degs} 0 1 ${x} ${y}\n            Z\n        `\n    };\n\n    const title = (() => {\n        const radius = 105;\n        const degs = props.arc * 360;\n        const rads = props.arc * 2 * Math.PI;\n        const x = 110 * Math.cos(rads);\n        const y = radius * Math.sin(rads);\n        const textPathLength = radius * rads;\n        const textLength = getTextWidth(props.title, '12px sans-serif')\n        const offset = (textPathLength - textLength) / 2;\n\n        return (\n            <>\n                <path id=\"title\" key=\"title\" className={styles.titlePath} d={`M ${radius} 0 A ${radius} ${radius} ${degs} 0 1 ${x} ${y}`} />\n                <text className={styles.title}>\n                    <textPath xlinkHref=\"#title\" startOffset={offset}>{props.title}</textPath>\n                </text>\n            </>\n        );\n    })();\n\n    const onMouseMove = (e: React.MouseEvent<SVGPathElement>) => {\n        const radius = getScoreFromMousePos(e);\n\n        if (radius !== hover) {\n            setHover(radius);\n        }\n    }\n\n    const onMouseLeave = () => setHover(undefined);\n\n    const onMouseClick = (e: React.MouseEvent<SVGPathElement>) => {\n        const radius = getScoreFromMousePos(e);\n\n        if (radius !== score) {\n            setScore(radius);\n        } else {\n            setScore(0);\n        }\n    }\n\n    const paths = () => {\n        const scoreSector = <path key=\"score\" className={styles.sectorFill} d={sectorPath(score)} />;\n\n        if (hover) {\n            const hoverSector = <path key=\"hover\" className={styles.sectorHover} d={sectorPath(hover)} />;\n\n            // Order matters: later elements will be drawn over earlier ones.\n            if (hover < score) {\n                return [scoreSector, hoverSector]\n            } else {\n                return [hoverSector, scoreSector]\n            }\n        } else {\n            return [scoreSector];\n        }\n    }\n\n    return <g>\n        {paths()}\n        <path \n            className={styles.sectorContainer} \n            d={sectorPath(10)} \n            onMouseMove={onMouseMove}\n            onMouseLeave={onMouseLeave}\n            onMouseDown={onMouseClick} />\n        {title}\n    </g>;\n}\n\nconst useStyles = createUseStyles(\n    {\n        sectorContainer: {\n            fill: \"transparent\",\n            stroke: \"black\",\n            strokeWidth: 1\n        },\n        sectorHover: {\n            fill: \"rgba(255, 128, 128)\",\n            stroke: \"none\"\n        },\n        sectorFill: {\n            fill: \"rgb(255, 0, 0)\",\n            stroke: \"none\"\n        },\n        titlePath: {\n            fill: \"transparent\"\n        },\n        title: {\n            textAlign: \"center\",\n            font: \"12px sans-serif\"\n        }\n    }\n);","import React from 'react';\nimport { Sector } from './Sector';\n\nexport type WheelProps = {\n    sectors: string[];\n    width: number;\n    height: number;\n}\n\nconst getMousePos = Object.assign(\n    (e: React.MouseEvent<SVGElement>): SVGPoint => {\n        const svg = getMousePos.svg || (getMousePos.svg = document.getElementById('rootSVG') as SVGSVGElement & HTMLElement);\n        const pt = svg.createSVGPoint();\n        pt.x = e.clientX;\n        pt.y = e.clientY;\n        return pt.matrixTransform(svg.getScreenCTM()?.inverse());\n    },\n    { svg: undefined as SVGSVGElement | undefined }\n);\n\nexport const Wheel = (props: WheelProps) => {\n    const makeSector = (title: string, idx: number) =>\n        <g key={title}transform={`rotate(${idx * 360 / props.sectors.length})`}>\n            <Sector \n                title={title}\n                arc={1 / props.sectors.length}\n                getMousePos={getMousePos}\n            />\n        </g>\n\n    return (\n        <svg id=\"rootSVG\" viewBox=\"-120 -120 240 240\" width={props.width} height={props.height}>\n            {props.sectors.map(makeSector)}\n        </svg>\n    );\n}","import { Wheel } from './Wheel';\n\nconst life_sectors = [\"Money\", \"Fun\", \"Friends\", \"Health\", \"Career\", \"Love\", \"Spirituality\", \"Family\"];\n\nfunction App() {\n  return <Wheel sectors={life_sectors} width={640} height={640} />\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}